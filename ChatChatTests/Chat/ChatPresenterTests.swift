//
//  ChatPresenterTests.swift
//  ChatChat
//
//  Created by Kenneth Yip on 2017-12-13.
//  Copyright (c) 2017 Razeware LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import ChatChat
import XCTest

class ChatPresenterTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: ChatPresenter!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupChatPresenter()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupChatPresenter()
  {
    sut = ChatPresenter()
  }
  
  // MARK: Test doubles
  
  class ChatDisplayLogicSpy: ChatDisplayLogic
  {
    var displayTextMessageCalled = false
    func displayTextMessage(viewModel: Chat.TextMessage.ViewModel) {
        displayTextMessageCalled = true
    }
    
    var displayPhotomessage = false
    func displayPhotoMessage(viewModel: Chat.PhotoMessage.ViewModel) {
        displayPhotomessage = true
    }
    
    var displayFetchedImage = false
    func displayFetchedImage(viewModel: Chat.ImageData.ViewModel) {
        displayFetchedImage = true
    }
    
    var displayTypingUpdateCalled = false
    func displayTypingUpdate(viewModel:Chat.Typing.ViewModel) {
        displayTypingUpdateCalled = true
    }
    
    var displayPhotoMessageSentCalled = false
    func displayPhotoMessageSent() {
        displayPhotoMessageSentCalled = true
    }
  }
  
  // MARK: Tests
  
  func testPresentTextMessage()
  {
    // Given
    let spy = ChatDisplayLogicSpy()
    sut.viewController = spy
    let response = Seeds.Messages.dummyResTextMessage
    
    // When
    sut.presentTextMessage(response: response)
    
    // Then
    XCTAssertTrue(spy.displayTextMessageCalled, "presentTextMessage(response:) should ask the view controller to display the text message")
  }
    
    func testPresentPhotoMessage()
    {
        // Given
        let spy = ChatDisplayLogicSpy()
        sut.viewController = spy
        let response = Seeds.Messages.dummyResPhotoMessage
        
        // When
        sut.presentPhotoMessage(response: response)
        
        // Then
        XCTAssertTrue(spy.displayPhotomessage, "presentPhotoMessage(response:) should ask the view controller to display the photo message")
    }

    func testPresentFetchedImage()
    {
        // Given
        let spy = ChatDisplayLogicSpy()
        sut.viewController = spy
        let response = Seeds.Messages.dummyResImageData
        
        // When
        sut.presentFetchedImage(response: response)
        
        // Then
        XCTAssertTrue(spy.displayFetchedImage, "presentFetchedImage(response:) should ask the view controller to display the fetched image")
    }
    
    func testPresentTypingUpdate()
    {
        // Given
        let spy = ChatDisplayLogicSpy()
        sut.viewController = spy
        let response = Chat.Typing.Response(isTyping: 0)
        
        // When
        sut.presentTypingUpdate(response: response)
        
        // Then
        XCTAssertTrue(spy.displayTypingUpdateCalled, "presentTypingUpdate(response:) should ask the view controller to display typing update")
    }
    
    func testPresentPhotoMessageSent()
    {
        // Given
        let spy = ChatDisplayLogicSpy()
        sut.viewController = spy
        
        // When
        sut.presentPhotoMessageSent()
        
        // Then
        XCTAssertTrue(spy.displayPhotoMessageSentCalled, "presentPhotoMessageSent(response:) should ask the view controller to display photo message being sent")
    }
}
