//
//  ChatWorkerTests.swift
//  ChatChat
//
//  Created by Kenneth Yip on 2017-12-13.
//  Copyright (c) 2017 Razeware LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import ChatChat
import XCTest

class ChatWorkerTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: ChatWorker!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupChatWorker()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupChatWorker()
  {
    sut = ChatWorker(chatApi: ChatWorkerApiSpy())
  }
  
  // MARK: Test doubles
    class ChatWorkerSpy: ChatWorker {
        
    }
    
    class ChatWorkerApiSpy: ChatAPIProtocol {
        var setChantChannelCalled = false
        func setChatChannel(channelId:String) {
            setChantChannelCalled = true
        }
        
        var observeMessagesCalled = false
        func observeMessages(onTextUpdate: @escaping (String, String, String) -> Void, onPhotoUpdate: @escaping (String, String, String) -> Void, onPhotoChange: @escaping (String, String) -> Void) {
            observeMessagesCalled = true
        }
        
        var fetchImageDataAtUrlCalled = false
        func fetchImageDataAtURL(photoURL: String, key: String?, completionHandler: @escaping (String?, UIImage?) -> Void) {
            fetchImageDataAtUrlCalled = true
        }
        
        var setTypingCalled = false
        func setTyping(isTyping:Bool) {
            setTypingCalled = true
        }
        
        var observeTypingCalled = false
        func observeTyping(onTypingUpdate: @escaping (Int) -> Void) {
            observeTypingCalled = true
        }
        
        var sendMessageCalled = false
        func sendMessage(text:String, senderDisplayName:String) {
             sendMessageCalled = true
        }
        
        var getPhotoMessgaeKeyCalled = false
        func getPhotoMessageKey() -> String? {
            getPhotoMessgaeKeyCalled = true
            return "dummyKey"
        }
        
        var storeCalled = false
        func store(file fileURL:URL, atPath path:String, withKey key:String) {
            storeCalled = true
        }

    }
    
    // MARK: Tests
    
    func testSetChatChannel()
    {
        // Given
        let chatApiSpy = sut.chatApi as! ChatWorkerApiSpy
        
        // When
        sut.setChatChannel(channelId: "dummyChannelId")
        
        // Then
        XCTAssert(chatApiSpy.setChantChannelCalled, "Calling setChatChannel(channelId:) should call setChatChannel")
    }
    
    func testObserveMessages()
    {
        // Given
        let chatApiSpy = sut.chatApi as! ChatWorkerApiSpy
        
        // When
        sut.observeMessages(onTextUpdate: { (senderId, key, photoUrl) in
            
        }, onPhotoUpdate: { (senderId, key, photoUrl) in
            
        }) { (key, photoUrl) in
            
        }
        
        // Then
        XCTAssert(chatApiSpy.observeMessagesCalled, "calling observeMessages(onTextUpdate:, onPhotoUpdate:, onPhotoChange:) should call chatApi's observeMessages")
    }

    func testFetchImageDataAtURL()
    {
        // Given
        let chatApiSpy = sut.chatApi as! ChatWorkerApiSpy
        
        // When
        sut.fetchImageDataAtURL(photoURL: "dummyPhotourl", key: "dummyKey") { (fetchedKey, fetchedImage) in
        }
        
        // Then
        XCTAssert(chatApiSpy.fetchImageDataAtUrlCalled, "calling fetchImageDataAtURL(photoURL:, key:, completionHandler:) should call chatApi's fetchImageDataAtURL")
    }
    
    func testSetTyping()
    {
        // Given
        let chatApiSpy = sut.chatApi as! ChatWorkerApiSpy
        
        // When
        sut.setTyping(isTyping: true)
        
        // Then
        XCTAssert(chatApiSpy.setTypingCalled, "Calling setTyping(isTyping:) should call chatApi's setTyping")
    }
    
    func testObserveTyping()
    {
        // Given
        let chatApiSpy = sut.chatApi as! ChatWorkerApiSpy
        
        // When
        sut.observeTyping { (istyping) in
            
        }
        
        // Then
        XCTAssert(chatApiSpy.observeTypingCalled, "calling observeTyping(istyping:) should call chatApi's observeTyping(onTypingUpdate:)")
    }

    func testSendMessage()
    {
        // Given
        let chatApiSpy = sut.chatApi as! ChatWorkerApiSpy
        
        // When
        sut.sendMessage(text: "dummyText", displayName: "dummyName")
        
        // Then
        XCTAssert(chatApiSpy.sendMessageCalled, "calling sendMessage(text:, displayName:) should call chatApi's sendMessage(text:, senderDisplayName:)")
    }
    
    func testGetPhotoMessageKey()
    {
        // Given
        let chatApiSpy = sut.chatApi as! ChatWorkerApiSpy
        
        // When
        let dummyKey = sut.getPhotoMessageKey()
        
        // Then
        XCTAssert(chatApiSpy.getPhotoMessgaeKeyCalled, "calling getPhotoMessageKey() should call chatApi's getPhotoMessageKey()")
        XCTAssert(dummyKey != "", "calling getPhotoMessageKey() should return some key")
    }
    
    func testStore()
    {
        // Given
        let chatApiSpy = sut.chatApi as! ChatWorkerApiSpy
        
        // When
        sut.store(file: URL(string:"dummyString")!, atPath: "dummyPath", withKey: "dummyKey")
        
        // Then
        XCTAssert(chatApiSpy.storeCalled, "calling storeCalled(file:, atPath:, withKey:) should call chatApi's store(file:, atPath:, withKey:)")
    }
}
