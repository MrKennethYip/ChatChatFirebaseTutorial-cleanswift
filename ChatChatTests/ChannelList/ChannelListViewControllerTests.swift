//
//  ChannelListViewControllerTests.swift
//  ChatChat
//
//  Created by Kenneth Yip on 2017-12-07.
//  Copyright (c) 2017 Razeware LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import ChatChat
import XCTest

class ChannelListViewControllerTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: ChannelListViewController!
  var window: UIWindow!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    window = UIWindow()
    setupChannelListViewController()
  }
  
  override func tearDown()
  {
    window = nil
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupChannelListViewController()
  {
    let bundle = Bundle.main
    let storyboard = UIStoryboard(name: "Main", bundle: bundle)
    sut = storyboard.instantiateViewController(withIdentifier: "ChannelListViewController") as! ChannelListViewController
  }
  
  func loadView()
  {
    window.addSubview(sut.view)
    RunLoop.current.run(until: Date())
  }
  
  // MARK: Test doubles
  
  class ChannelListBusinessLogicSpy: ChannelListBusinessLogic
  {
    var observeChannelsCalled = false
    func observeChannels() {
        observeChannelsCalled = true;
    }
    func saveSenderDisplayName(name:String) {
        
    }
    func selectChannel(selectedChannel:Channel) {
        
    }
    
    var createChannelCalled = false
    func createChannel(createChannelRequest:ChannelList.CreateChannel.Request) {
        createChannelCalled = true
    }

  }
    
    class TableViewSpy: UITableView {
        var reloadDataCalled = false
        override func reloadData() {
            reloadDataCalled = true
        }
    }
  
  // MARK: Tests
  
  func testObserveChannelsWhenViewIsLoaded()
  {
    // Given
    let spy = ChannelListBusinessLogicSpy()
    sut.interactor = spy
    
    // When
    loadView()
    
    // Then
    XCTAssertTrue(spy.observeChannelsCalled, "viewDidLoad() should ask the interactor to do observe channels")
  }
  
  func testDisplayUpdatedChannelList()
  {
    // Given
    let viewModel = ChannelList.FetchChannels.ViewModel(displayedChannels: [Seeds.Channels.swiftChannel])
    let tableViewSpy = TableViewSpy()
    sut.tableView = tableViewSpy;
    
    // When
    loadView()
    sut.displayUpdatedChannelList(viewModel: viewModel)
    
    // Then
    XCTAssertEqual(sut.channels.count, 1, "displaySomething(viewModel:) should update the name text field")
    XCTAssertTrue(tableViewSpy.reloadDataCalled, "displaySomething(viewModel:) should call reloadData()")
  }
    
    func testCreateChannel()
    {
        // Given
        let spy = ChannelListBusinessLogicSpy()
        sut.interactor = spy
        sut.newChannelTextField?.text = "new channel"
        
        // When
        loadView()
        sut.createChannel(sut.newChannelTextField!)
        
        // Then
        XCTAssertTrue(spy.createChannelCalled, "createChannel(sender:) should ask the interactor to create a new channel")
    }
}
