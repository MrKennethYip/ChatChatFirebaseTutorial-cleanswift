//
//  ChannelListInteractorTests.swift
//  ChatChat
//
//  Created by Kenneth Yip on 2017-12-07.
//  Copyright (c) 2017 Razeware LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import ChatChat
import XCTest

class ChannelListInteractorTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: ChannelListInteractor!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupChannelListInteractor()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupChannelListInteractor()
  {
    sut = ChannelListInteractor()
  }
  
  // MARK: Test doubles
  
  class ChannelListPresentationLogicSpy: ChannelListPresentationLogic
  {
    var presentUpdatedChannelListCalled = false
    func presentUpdatedChannelList(response: ChannelList.FetchChannels.Response) {
        presentUpdatedChannelListCalled = true
    }
    
    func presentError(response:ChannelList.Error.Response) {
        
    }
  }
  
    class ChannelListWorkerSpy: ChannelListWorker {
        var createChannelCalled = false
        override func createChannel(channel:Channel, onComplete: @escaping (Channel, BackendNetworkError?) -> Void) {
            createChannelCalled = true
            onComplete(Seeds.Channels.swiftChannel, nil)
        }
        
        var observeChannelCalled = false
        override func observeChannels(onChannelUpdate: @escaping (Channel) -> Void) {
            observeChannelCalled = true
            onChannelUpdate(Seeds.Channels.iosChannel)
        }
    }
    
  // MARK: Tests
    func testCreateChannel() {
        //Given
        let spy = ChannelListPresentationLogicSpy()
        sut.presenter = spy
        let workerSpy = ChannelListWorkerSpy(channelApi: FirebaseBackend())
        sut.channelWorker = workerSpy
        let request = ChannelList.CreateChannel.Request(channelName: "Dummy Name")

        //When
        sut.createChannel(createChannelRequest: request)

        //Then
        XCTAssertTrue(workerSpy.createChannelCalled, "worker createChannel(name:, onComplete:) should should be called")
         XCTAssertTrue(spy.presentUpdatedChannelListCalled, "createChannel(request:) should ask the presenter to update the channel list")
    }

    
  func testObserveChannels()
  {
    // Given
    let spy = ChannelListPresentationLogicSpy()
    sut.presenter = spy
    let workerSpy = ChannelListWorkerSpy(channelApi: FirebaseBackend())
    sut.channelWorker = workerSpy
    
    // When
    sut.observeChannels()
    
    // Then
    XCTAssertTrue(spy.presentUpdatedChannelListCalled, "createChannel(request:) should ask the presenter to update the channel list")
    XCTAssertTrue(workerSpy.observeChannelCalled, "observeChannels() should ask the presenter to update the channel list when new channel is added")
  }
}
