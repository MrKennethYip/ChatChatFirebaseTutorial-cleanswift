//
//  ChannelListWorkerTests.swift
//  ChatChat
//
//  Created by Kenneth Yip on 2017-12-07.
//  Copyright (c) 2017 Razeware LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import ChatChat
import XCTest

class ChannelListWorkerTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: ChannelListWorker!
    static var testChannels: [Channel]!

  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupChannelListWorker()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupChannelListWorker()
  {
    sut = ChannelListWorker(channelApi: ChannelWorkerApiSpy())
  }
  
  // MARK: Test doubles
    class ChannelListWorkerSpy: ChannelListWorker {
        var observeChannelsCalled = false
        override func observeChannels(onChannelUpdate: @escaping (Channel) -> Void) {
            observeChannelsCalled = true
        }
    }
    
    class ChannelWorkerApiSpy: ChannelAPIProtocol {
        var observeChannelsCalled = false
        var createChannelsCalled = false

        func observeChannels(onChannelUpdate: @escaping (Channel) -> Void) {
            observeChannelsCalled = true
            onChannelUpdate(Seeds.Channels.swiftChannel)
        }
        
        func createChannel(channel:Channel, onComplete: @escaping (Channel?, BackendNetworkError?) -> Void) {
            createChannelsCalled = true
            onComplete(Seeds.Channels.iosChannel, nil)
        }
    }

  // MARK: Tests
  
    func testObserveChannelsCalled()
    {
        // Given
        let channelApiSpy = sut.channelApi as! ChannelWorkerApiSpy
        
        // When
        let expect = expectation(description: "Wait for observeChannels() to return")
        sut.observeChannels { (channel:Channel) in
            expect.fulfill()
        }
        waitForExpectations(timeout: 1.1)
        
        // Then
        XCTAssert(channelApiSpy.observeChannelsCalled, "Calling observeChannels() should return id and name when channel added")
    }

    
  func testCreateChannel()
  {
    // Given
    let channelApiSpy = sut.channelApi as! ChannelWorkerApiSpy
    let dummyChannel = Channel(id: "someId", name: "someName")
    
    // When
    let expect = expectation(description: "Wait for createChannel() to return")
    sut.createChannel(channel: dummyChannel) { (channel, backendError) in
        expect.fulfill()
    }
    waitForExpectations(timeout: 1.1)
    
    // Then
    XCTAssert(channelApiSpy.createChannelsCalled, "Calling createChannel() should return a channel after creating")  }
}
