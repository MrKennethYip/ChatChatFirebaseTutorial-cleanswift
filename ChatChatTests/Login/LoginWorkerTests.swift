//
//  LoginWorkerTests.swift
//  ChatChat
//
//  Created by Kenneth Yip on 2017-12-05.
//  Copyright (c) 2017 Razeware LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import ChatChat
import XCTest

class LoginWorkerTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: LoginWorker!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupLoginWorker()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupLoginWorker()
  {
    sut = LoginWorker(loginApi: FirebaseBackendSpy())
  }
  
  // MARK: Test doubles
  
    class FirebaseBackendSpy: FirebaseBackend
    {
        // MARK: Method call expectations
        var signInAnonymouslyCalled = false
        
        // MARK: Spied methods
        
        override func signInAnonymously(onComplete: @escaping (Bool, BackendNetworkError?) -> Void) {
            signInAnonymouslyCalled = true
            DispatchQueue.main.asyncAfter(deadline: .now() + .seconds(1)) {
                onComplete (true, nil)
            }
        }
    }

  // MARK: Tests
  
  func testSignInAnonymouslyCalled()
  {
    // Given
    let firebaseBackendSpy = sut.loginApi as! FirebaseBackendSpy

    // When
    let expect = expectation(description: "Wait for signInAnonymously() to return")
    sut.signInAnonymously { (success: Bool, error:BackendNetworkError?) in
        expect.fulfill()
    }
    waitForExpectations(timeout: 1.1)
    
    // Then
    XCTAssert(firebaseBackendSpy.signInAnonymouslyCalled, "Calling signInAnonymouslyCalled() should return with true or error")
  }
}
