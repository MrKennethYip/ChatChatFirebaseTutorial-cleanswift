//
//  LoginViewControllerTests.swift
//  ChatChat
//
//  Created by Kenneth Yip on 2017-12-05.
//  Copyright (c) 2017 Razeware LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import ChatChat
import XCTest

class LoginViewControllerTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: LoginViewController!
  var window: UIWindow!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    window = UIWindow()
    setupLoginViewController()
  }
  
  override func tearDown()
  {
    window = nil
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupLoginViewController()
  {
    let bundle = Bundle.main
    let storyboard = UIStoryboard(name: "Main", bundle: bundle)
    sut = storyboard.instantiateViewController(withIdentifier: "LoginViewController") as! LoginViewController
  }
  
  func loadView()
  {
    window.addSubview(sut.view)
    RunLoop.current.run(until: Date())
  }
  
  // MARK: Test doubles
  
  class LoginBusinessLogicSpy: LoginBusinessLogic
  {
    var signInAnonymouslyCalled = false
    
    func signInAnonymously(requestModel:Login.SignIn.Request) {
        signInAnonymouslyCalled = true
    }
  }
    
    class LoginRoutingLogicSpy: NSObject, LoginRoutingLogic, LoginDataPassing {
        var dataStore: LoginDataStore?
        var performSegueCalled = false
        func performSegue(withIdentifier identifier: String, sender: Any?) {
            performSegueCalled = true
        }
    }
  
  // MARK: Tests
  
  func testInteractorSignInAnonymouslyCalled()
  {
    // Given
    let spy = LoginBusinessLogicSpy()
    sut.interactor = spy
    
    // When
    loadView()
    let dummyObject = "Dummy Object"
    sut.nameField.text = "test name"
    sut.loginDidTouch(dummyObject as AnyObject)
    
    // Then
    XCTAssertTrue(spy.signInAnonymouslyCalled, "loginDidTouch() should ask the interactor to do something")
  }
  
  func testPresentChannelList()
  {
    // Given
    let viewModel = Login.SignIn.ViewModel(success: true, errorString:nil)
    let spy = LoginRoutingLogicSpy()
    sut.router = spy
    
    // When
    loadView()
    sut.presentChannelList(viewModel: viewModel)
    
    // Then
    XCTAssertTrue(spy.performSegueCalled, "presentChannelList(viewModel:) should call router to performSegue")
  }
}
