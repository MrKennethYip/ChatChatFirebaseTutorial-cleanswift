//
//  LoginInteractorTests.swift
//  ChatChat
//
//  Created by Kenneth Yip on 2017-12-05.
//  Copyright (c) 2017 Razeware LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import ChatChat
import XCTest

class LoginInteractorTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: LoginInteractor!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupLoginInteractor()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupLoginInteractor()
  {
    sut = LoginInteractor()
  }
  
  // MARK: Test doubles
  
  class LoginPresentationLogicSpy: LoginPresentationLogic
  {
    var presentChannelListCalled = false
    
    func presentChannelList(loginResponseModel:Login.SignIn.Response)
    {
      presentChannelListCalled = true
    }
  }
    class LoginWorkerSpy: LoginWorker {
        var signInAnonymouslyCalled = false
        override func signInAnonymously(onComplete: @escaping (Bool, BackendNetworkError?) -> Void) {
                self.signInAnonymouslyCalled = true
        }
    }
    
    class LoginWorkerApiSpy: LoginAPIProtocol {
        var senderId: String = "dummyId"

        func signInAnonymously(onComplete: @escaping (Bool, BackendNetworkError?) -> Void) {
            onComplete (true, nil)
        }
    }
  
  // MARK: Tests
  
  func testSignInAnonymouslyCalled()
  {
    // Given
    let workerApiSpy = LoginWorkerApiSpy()
    let workerSpy = LoginWorkerSpy(loginApi: workerApiSpy)
    sut.loginWorker = workerSpy
    
    let requestModel = Login.SignIn.Request(senderName: "Dummy Name")
    
    // When
    sut.signInAnonymously(requestModel: requestModel)
    
    // Then
    XCTAssertTrue(workerSpy.signInAnonymouslyCalled, "loginWorker.signInAnonymously(:onComplete) should be called")
  }
    
    func testPresentChannelListCalled()
    {
        // Given
        let loginPresentationLogicSpy = LoginPresentationLogicSpy()
        sut.presenter = loginPresentationLogicSpy
        let loginWorker = LoginWorker(loginApi: LoginWorkerApiSpy())
        sut.loginWorker = loginWorker
        
        let requestModel = Login.SignIn.Request(senderName: "Dummy Name")

        // When
        sut.signInAnonymously(requestModel: requestModel)
        
        // Then
        XCTAssertTrue(loginPresentationLogicSpy.presentChannelListCalled, "presentChannelList(loginResponsemodel:) should ask the presenter to show Channel List Screen")
    }

}
