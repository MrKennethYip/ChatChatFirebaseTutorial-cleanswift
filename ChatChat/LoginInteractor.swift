//
//  LoginInteractor.swift
//  ChatChat
//
//  Created by Kenneth Yip on 2017-11-23.
//  Copyright (c) 2017 Razeware LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic
{
    func signInAnonymously(requestModel: Login.SignIn.Request)
}

protocol LoginDataStore
{
    var senderDisplayName: String { get set }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore
{
    var presenter: LoginPresentationLogic?
    var senderDisplayName: String = ""
    var loginWorker: LoginWorker = LoginWorker(loginApi: FirebaseBackend())
    
    func signInAnonymously(requestModel:Login.SignIn.Request) {
        if let displayName = requestModel.senderName {
            if validateName(name: displayName) {
                self.senderDisplayName = displayName;
            } else {
                let loginResponseModel = Login.SignIn.Response(success: false, errorString:"Please enter valid name")
                self.presenter?.presentChannelList(loginResponseModel: loginResponseModel)
                return
            }
        }
        loginWorker.signInAnonymously { (success: Bool, someError: BackendNetworkError?) in
            var loginResponseModel = Login.SignIn.Response(success: success, errorString:nil)
            
            if let validError = someError {
                switch validError {
                case .CannotComplete(let someMessage):
                    loginResponseModel = Login.SignIn.Response(success:success, errorString: someMessage)
                default:
                    loginResponseModel = Login.SignIn.Response(success: success, errorString: "Unknown Error")
                }
            }
            self.presenter?.presentChannelList(loginResponseModel: loginResponseModel)
        }
    }
    
    func validateName(name:String) -> Bool {
        if name != "" {
            return true
        }
        return false
    }
}
