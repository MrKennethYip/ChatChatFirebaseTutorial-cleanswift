//
//  ChatInteractor.swift
//  ChatChat
//
//  Created by Kenneth Yip on 2017-11-24.
//  Copyright (c) 2017 Razeware LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Photos

protocol ChatBusinessLogic
{
    func setChatChannel(request: Chat.SelectedChannel.Request)
    func observeMessages()
    func fetchImageDataAtURL(request: Chat.ImageData.Request)
    func setTyping(request: Chat.Typing.Request)
    func observeTyping()
    func sendMessage(request: Chat.TextMessage.Request)
    func sendPhotoMessage(request: Chat.PhotoMessage.Request)
}

protocol ChatDataStore
{
    var senderId:String {get}
    var senderDisplayName: String { get set }
    var channel: Channel {get set}
}

class ChatInteractor: ChatBusinessLogic, ChatDataStore
{
  var presenter: ChatPresentationLogic?
  var chatWorker: ChatWorker? = ChatWorker(chatApi: FirebaseBackend())
    var senderDisplayName: String = ""
    var channel:Channel = Channel(id: "",name: "")
    var senderId: String = LoginWorker(loginApi: FirebaseBackend()).senderId
    
    func setChatChannel(request: Chat.SelectedChannel.Request) -> Void {
        self.chatWorker?.setChatChannel(channelId: request.channelId)
    }
    
    func observeMessages() {
        self.chatWorker?.observeMessages(onTextUpdate: onTextUpdate, onPhotoUpdate: onPhotoUpdate, onPhotoChange: onPhotoChange)
    }
    
    func onTextUpdate(senderId: String, senderName: String, text: String) {
        let textMessage = Chat.TextMessage.Response(senderId: senderId, senderName: senderId, text: text)
        self.presenter?.presentTextMessage(response: textMessage)
    }
    
    func onPhotoUpdate(senderId: String, key: String, photoUrl: String) {
        let photoMessage = Chat.PhotoMessage.Response(senderId: senderId, key: key, photoUrl: photoUrl)
        self.presenter?.presentPhotoMessage(response: photoMessage)
        
        if (photoUrl.hasPrefix("gs://")) {
            let imageDataRequest = Chat.ImageData.Request(key: key, photoUrl: photoUrl)
            fetchImageDataAtURL(request: imageDataRequest)
        }
    }
    
    func onPhotoChange(key: String, photoUrl: String) {
        if (photoUrl.hasPrefix("gs://")) {
            let imageDataRequest = Chat.ImageData.Request(key: key, photoUrl: photoUrl)
            fetchImageDataAtURL(request: imageDataRequest)
        }
    }
    
    func fetchImageDataAtURL(request: Chat.ImageData.Request){
        self.chatWorker?.fetchImageDataAtURL(photoURL: request.photoUrl, key: request.key, completionHandler: { (fetchedKey, fetchedImage) in
            if let returnedKey = fetchedKey, let returnedImage = fetchedImage {
                let imageData = Chat.ImageData.Response(key: returnedKey, image: returnedImage)
                self.presenter?.presentFetchedImage(response: imageData)
            } else {
                //TODO: Handle Error Silently
            }
        })
    }
    
    func setTyping(request:Chat.Typing.Request) {
        self.chatWorker?.setTyping(isTyping: request.isTyping)
    }
    
    func observeTyping() {
        self.chatWorker?.observeTyping(onTypingUpdate: { (usersTyping) in
            let response = Chat.Typing.Response(isTyping: usersTyping)
            self.presenter?.presentTypingUpdate(response: response)
        })
    }
    
    func sendMessage(request: Chat.TextMessage.Request) {
        self.chatWorker?.sendMessage(text:request.senderText, displayName: request.senderDisplayName)
    }
    
    func sendPhotoMessage(request: Chat.PhotoMessage.Request) {
        let assets = PHAsset.fetchAssets(withALAssetURLs: [request.photoReferenceUrl], options: nil)
        let asset = assets.firstObject

        // 3
        if let key = self.chatWorker?.getPhotoMessageKey() {
            self.presenter?.presentPhotoMessageSent()
            // 4
            asset?.requestContentEditingInput(with: nil, completionHandler: { (contentEditingInput, info) in
                let imageFileURL = contentEditingInput?.fullSizeImageURL
                
                // 5
                let path = "\(self.senderId)/\(Int(Date.timeIntervalSinceReferenceDate * 1000))/\(request.photoReferenceUrl.lastPathComponent)"
                
                self.storeFileHandler(imageFileURL: imageFileURL!, path: path, key:key)
            })
        }
    }
    
    func storeFileHandler(imageFileURL:URL, path:String, key:String) {
        self.chatWorker?.store(file: imageFileURL, atPath: path, withKey: key)
    }
}
