//
//  ChannelListInteractor.swift
//  ChatChat
//
//  Created by Kenneth Yip on 2017-11-23.
//  Copyright (c) 2017 Razeware LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ChannelListBusinessLogic
{
    func observeChannels()
    func saveSenderDisplayName(name:String)
    func selectChannel(selectedChannel:Channel)
    func createChannel(createChannelRequest:ChannelList.CreateChannel.Request)
}

protocol ChannelListDataStore
{
    var senderDisplayName: String { get set }
    var channel: Channel {get set}
    var channels: [Channel] {get set}
}

class ChannelListInteractor: ChannelListBusinessLogic, ChannelListDataStore
{
  var presenter: ChannelListPresentationLogic?
  var senderDisplayName: String = ""
    var channel:Channel = Channel(id: "",name: "")
    var channels: [Channel] = []
    var channelWorker: ChannelListWorker? = ChannelListWorker(channelApi: FirebaseBackend())
    
  // MARK: Do something
    func saveSenderDisplayName(name:String) {
        senderDisplayName = name
    }
    
    func selectChannel(selectedChannel:Channel) {
        channel = selectedChannel
    }
    
    func observeChannels() {
        channelWorker?.observeChannels(onChannelUpdate: { (channel) in
            if (self.addChannelToList(channel: channel)) {
                let channels = ChannelList.FetchChannels.Response(channels: self.channels)
                self.presenter?.presentUpdatedChannelList(response: channels)
            } else {
                //display error
            }
        })
    }
    
    func createChannel(createChannelRequest:ChannelList.CreateChannel.Request) {
        if let channelName = createChannelRequest.channelName {
            if (channelName != "") {
                let channel = Channel(id: "", name: channelName)
                channelWorker?.createChannel(channel: channel, onComplete: { (channel, backendError) in
                    let updatedChannel = channel
                    if (updatedChannel != nil) && self.addChannelToList(channel: updatedChannel!) {
                        let channels = ChannelList.FetchChannels.Response(channels: self.channels)
                        self.presenter?.presentUpdatedChannelList(response: channels)
                    }
                    if (updatedChannel == nil){
                        let response = ChannelList.Error.Response(errorMessage: "Could not create Channel")
                        self.presenter?.presentError(response: response)
                    }
                })
            } else {
                let response = ChannelList.Error.Response(errorMessage: "Please add valid Channel Name")
                self.presenter?.presentError(response: response)
            }
        }
    }
    
    func addChannelToList(channel:Channel) -> Bool {
        let results = self.channels.filter { $0.id == channel.id } //Check to see if channel exists
        if (results.isEmpty) {
            self.channels.append(channel)
            return true
        }
        return false
    }

}
